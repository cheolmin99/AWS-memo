9월 1일
14 : 30 ~ 15 : 00
- AWS Graviton을 이용해 더 적은 비용으로 더 높은 성능을 내보기
----------------------------------------------------------------------------------------------------------
강의 내용 : 
자체 개발로 인한 고성능 프로세서를 개발함. 왜? 워크로드가 다양해서 비용, 성능이 달라서

최적화된 설계가 된 Graviton 비용을 절감하면서 성능은 최대로
Graviton이 지원하는 EC2 인스턴스 2 -> 3 으로 갈 수록 고성능을 요구할 수 있음 서울에선 6개 정도 사용 가능

동급 인스턴스 대비 20% 낮은 비용 / 최대 40% 가격대비 성능 향상
옵션이 약정일 경우 비용 절감을 할 수 있음

어떤걸 지원하고 있는지?
Databases - Docyment DB, Aurora, RDS, ElastiCashe, MemoryDB for Redis, NEptune

Analutics - Open Search Service, EMR

Compute - Lambda, Fargatem Beanstalk

Machine learning - SageMaker

전환시 고려사항
워크로드 난이도가 쉬운걸 먼저 전환시

윈도우 미지원!! Arm64에서 사용하는 람다, 리눅스 환경에서 쉬움. (c/c++은 조금 어렵)

커뮤니티 os에서도 이용 가능함 ex) cent os

Customer Case Study
AWS의 관리형 서비스에 Graviton을 우선 적용

다중 아키텍처 이미지 적용
ARM 프로세서엣 최적화 된 런타임 사용
사내 보안 에이전트를 ARM 프로세서 용으로 재빌드

Graviton 전환하는 방법?
RDS 지원 : 가격대비 성능 최대 52% 향상 
Graviton2로 쉽게 업그레이드 가능
포팅 불 필요로 인해 호환 신경 x
더 높은 EBS 및 네트워크 대역폭 지원
MySQL 사용가능

RDS 전환 고려사항!
다중 AZ 배포를 통해 Primary와 Standby가 동시에 업데이트가 일어나지 않도록 구성해 영향도를 최소화

Aurora 전환 고려사항
수동 스냅샷을 생성하여 롤백이 가능하도록 구성
읽기 전용 복제본을 먼저 수정하고 검증한 뒤 읽기 전용 복제본으로 Failover 권장
단계별로 업그레이드 권장!

OpenSearch 지원
유휴 상태의 암호화 및 진행중인 역할 기반 액세스 제어, 클러스터 간 검색
7.9 버전 충족하는지? 클러스터 노드의 인스턴스 유형 수정 올바르게 되는지 확인
스냅샷을 생성해 롤백 가능하니 데이터 유실위험을 최소화 하길

ElasicCashe 수평적으로 확장이됨 GB당 비용이 20% 더 나은 가격대비 성능 제공(graciton2)
블루/ 그린 전환으로 동작함 데이터 양에 따라 다름

EC2 전환
호환성이 고려 되어야 함 앱에 따라 전환 과정이 다름
java와 같은 just in time compiled language를 사용하는 워크로드의 경우 arm64 아키텍처를 선택후 Graviton을 바로 사용 가능
기본 compiled language같은 경우 아키텍처를 다시 컴파일 해야함

다중 아키텍처 이미지란
컴퓨팅 환경에 구애받지 않고 자유롭게 이미지를 배포할 수 있음

가중치 기반 라우팅을 사용 먼저 작은 트래픽을 새로운 Graviton기반으로 옮길 수 있음
카나리 릴리즈 전략 : 인프라를 적용하기 전에 소수의 사용자에게 점진적으로 미리 적용 시켜보기


----------------------------------------------------------------------------------------------------------
